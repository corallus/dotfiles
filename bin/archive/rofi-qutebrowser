#!/usr/bin/env bash

#:bind o spawn --userscript ~/bin/qutebrowser/rofi_qutebrowser open
#:bind O spawn --userscript ~/bin/qutebrowser/rofi_qutebrowser tab

# the name of the rofi command
ROFI_CMD=${ROFI_CMD:-rofi}
ROFI_ARGS=${ROFI_ARGS:-}

rofi_default_args=(
        -no-custom
	-i
	-l 10
        -p 'Open:' -dmenu
    )

CONFIG_DIR=${CONFIG_DIR:-$QUTE_CONFIG_DIR}
CONFIG_DIR=${CONFIG_DIR:-$HOME/.config/qutebrowser}
DATA_DIR=${DATA_DIR:-$QUTE_DATA_DIR}
DATA_DIR=${DATA_DIR:-$HOME/.local/share/qutebrowser}

msg() {
    local cmd="$1"
    shift
    local msg="$*"
    if [ -z "$QUTE_FIFO" ] ; then
        echo "$cmd: $msg" >&2
    else
        echo "message-$cmd '${msg//\'/\\\'}'" >> "$QUTE_FIFO"
    fi
}
die() {
    msg error "$*"
    if [ -n "$QUTE_FIFO" ] ; then
        # when run as a userscript, the above error message already informs the
        # user about the failure, and no additional "userscript exited with status
        # 1" is needed.
        exit 0;
    else
        exit 1;
    fi
}

[ -z "$QUTE_URL" ] && QUTE_URL='http://google.com'

ls-files() {
    echo "$QUTE_URL"

    # Check quickmarks
    cat "$CONFIG_DIR"/quickmarks

    # Next bookmarks
    cat "$CONFIG_DIR"/bookmarks/urls | awk '{print $1 " " $2}'

    # Finally history
    cat "$DATA_DIR"/history | awk '{print $2 " " $3}'
}

line=$(ls-files | $ROFI_CMD "${rofi_default_args[@]}" $ROFI_ARGS) || true

if [ -z "$line" ];  then
    exit 0
fi

url=$(echo $line | awk '{print $1;}')

case $1 in
    open) printf '%s' "open $url" >> "$QUTE_FIFO" || qutebrowser "$url" ;;
    tab)    printf '%s' "open -t $url" >> "$QUTE_FIFO" || qutebrowser "$url"  ;;
esac

